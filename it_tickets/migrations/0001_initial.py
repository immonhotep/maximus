# Generated by Django 5.0.7 on 2024-08-13 15:11

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, null=True)),
                ('short_name', models.CharField(max_length=3, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, null=True, unique=True)),
                ('short_name', models.CharField(max_length=10, null=True, unique=True)),
                ('description', models.TextField(max_length=500, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Workrole',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, null=True, unique=True)),
                ('description', models.TextField(max_length=500, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('first_name', models.CharField(blank=True, max_length=200, null=True)),
                ('last_name', models.CharField(blank=True, max_length=200, null=True)),
                ('email', models.EmailField(max_length=50, unique=True)),
                ('phone', models.CharField(blank=True, max_length=20, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('log_count', models.IntegerField(default=0)),
                ('avatar', models.ImageField(default='images/default_user.jpg', null=True, upload_to='images/user_images')),
                ('bio', models.TextField(max_length=400, null=True)),
                ('department_manager', models.BooleanField(blank=True, default=False)),
                ('on_call_person', models.BooleanField(blank=True, default=False)),
                ('department', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='it_tickets.department')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
                ('workrole', models.ManyToManyField(blank=True, to='it_tickets.workrole')),
            ],
        ),
        migrations.CreateModel(
            name='Ticket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ticket_id', models.CharField(blank=True, max_length=20)),
                ('title', models.CharField(blank=True, max_length=150, null=True)),
                ('ticket_description', models.TextField(blank=True, max_length=500)),
                ('priority', models.CharField(choices=[('INFO', 'INFO'), ('WARNING', 'WARNING'), ('CRITICAL', 'CRITICAL'), ('FATAL', 'FATAL')], default='INFO', max_length=20)),
                ('status', models.CharField(choices=[('QUEUED', 'QUEUED'), ('INPROGRESS', 'INPROGRESS'), ('RESOLVED', 'RESOLVED'), ('CLOSED', 'CLOSED')], default='QUEUED', max_length=20)),
                ('resolution_status', models.TextField(blank=True, max_length=500, null=True)),
                ('opened', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('customer', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='cust', to='it_tickets.customer')),
                ('dispacher_department', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='dispacher_dep', to='it_tickets.department')),
                ('dispacher_profile', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='dispacher_prof', to='it_tickets.profile')),
                ('resolver_department', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resolver_dep', to='it_tickets.department')),
                ('resolver_profile', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resolver_prof', to='it_tickets.profile')),
            ],
        ),
    ]
